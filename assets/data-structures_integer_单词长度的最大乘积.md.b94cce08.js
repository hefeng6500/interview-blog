import{_ as n,c as s,o as a,a as t}from"./app.a1f82200.js";const _='{"title":"\u5355\u8BCD\u957F\u5EA6\u7684\u6700\u5927\u4E58\u79EF","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u9898\u76EE","slug":"\u9898\u76EE"},{"level":2,"title":"\u601D\u8DEF","slug":"\u601D\u8DEF"},{"level":2,"title":"\u4EE3\u7801","slug":"\u4EE3\u7801"}],"relativePath":"data-structures/integer/\u5355\u8BCD\u957F\u5EA6\u7684\u6700\u5927\u4E58\u79EF.md","lastUpdated":1642846449646}',p={},o=t(`<h1 id="\u5355\u8BCD\u957F\u5EA6\u7684\u6700\u5927\u4E58\u79EF" tabindex="-1">\u5355\u8BCD\u957F\u5EA6\u7684\u6700\u5927\u4E58\u79EF <a class="header-anchor" href="#\u5355\u8BCD\u957F\u5EA6\u7684\u6700\u5927\u4E58\u79EF" aria-hidden="true">#</a></h1><h2 id="\u9898\u76EE" tabindex="-1">\u9898\u76EE <a class="header-anchor" href="#\u9898\u76EE" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/aseY1I/" target="_blank" rel="noopener noreferrer">\u5251\u6307 Offer II 005. \u5355\u8BCD\u957F\u5EA6\u7684\u6700\u5927\u4E58\u79EF</a></p><p>\u7ED9\u5B9A\u4E00\u4E2A\u5B57\u7B26\u4E32\u6570\u7EC4 \xA0words\uFF0C\u8BF7\u8BA1\u7B97\u5F53\u4E24\u4E2A\u5B57\u7B26\u4E32 words[i] \u548C words[j] \u4E0D\u5305\u542B\u76F8\u540C\u5B57\u7B26\u65F6\uFF0C\u5B83\u4EEC\u957F\u5EA6\u7684\u4E58\u79EF\u7684\u6700\u5927\u503C\u3002\u5047\u8BBE\u5B57\u7B26\u4E32\u4E2D\u53EA\u5305\u542B\u82F1\u8BED\u7684\u5C0F\u5199\u5B57\u6BCD\u3002\u5982\u679C\u6CA1\u6709\u4E0D\u5305\u542B\u76F8\u540C\u5B57\u7B26\u7684\u4E00\u5BF9\u5B57\u7B26\u4E32\uFF0C\u8FD4\u56DE 0\u3002</p><h2 id="\u601D\u8DEF" tabindex="-1">\u601D\u8DEF <a class="header-anchor" href="#\u601D\u8DEF" aria-hidden="true">#</a></h2><h2 id="\u4EE3\u7801" tabindex="-1">\u4EE3\u7801 <a class="header-anchor" href="#\u4EE3\u7801" aria-hidden="true">#</a></h2><p><strong>1. \u66B4\u529B\u5FAA\u73AF</strong></p><div class="language-js"><pre><code><span class="token comment">/**
 * @param {string[]} words
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">maxProduct</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">words</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">repeatCheck</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> string <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> x <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">const</span> y <span class="token operator">=</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>

      <span class="token keyword">const</span> isRepeat <span class="token operator">=</span> <span class="token function">repeatCheck</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRepeat<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,8),e=[o];function c(u,l,r,k,i,d){return a(),s("div",null,e)}var w=n(p,[["render",c]]);export{_ as __pageData,w as default};
