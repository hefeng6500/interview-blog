import{_ as n,c as a,o as s,a as t}from"./app.3c45cc38.js";const _='{"title":"\u6392\u5E8F\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u5B57\u4E4B\u548C","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u9898\u76EE","slug":"\u9898\u76EE"},{"level":2,"title":"\u601D\u8DEF","slug":"\u601D\u8DEF"},{"level":2,"title":"\u4EE3\u7801","slug":"\u4EE3\u7801"}],"relativePath":"data-structures/integer/\u6392\u5E8F\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u5B57\u4E4B\u548C.md","lastUpdated":1641702656502}',p={},o=t(`<h1 id="\u6392\u5E8F\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u5B57\u4E4B\u548C" tabindex="-1">\u6392\u5E8F\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u5B57\u4E4B\u548C <a class="header-anchor" href="#\u6392\u5E8F\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u5B57\u4E4B\u548C" aria-hidden="true">#</a></h1><h2 id="\u9898\u76EE" tabindex="-1">\u9898\u76EE <a class="header-anchor" href="#\u9898\u76EE" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/kLl5u1/" target="_blank" rel="noopener noreferrer">\u5251\u6307 Offer II 006. \u6392\u5E8F\u6570\u7EC4\u4E2D\u4E24\u4E2A\u6570\u5B57\u4E4B\u548C</a></p><p>\u7ED9\u5B9A\u4E00\u4E2A\u5DF2\u6309\u7167 \u5347\u5E8F\u6392\u5217 \u7684\u6574\u6570\u6570\u7EC4 numbers \uFF0C\u8BF7\u4F60\u4ECE\u6570\u7EC4\u4E2D\u627E\u51FA\u4E24\u4E2A\u6570\u6EE1\u8DB3\u76F8\u52A0\u4E4B\u548C\u7B49\u4E8E\u76EE\u6807\u6570 target \u3002</p><h2 id="\u601D\u8DEF" tabindex="-1">\u601D\u8DEF <a class="header-anchor" href="#\u601D\u8DEF" aria-hidden="true">#</a></h2><p>\u8DDF\u529B\u6263\u7B2C\u4E00\u9898\u4E24\u6570\u4E4B\u548C\u57FA\u672C\u4E00\u6837\uFF0C\u8FD9\u91CC\u662F\u5347\u5E8F\u6392\u5217</p><p>\u53EF\u4EE5\u901A\u8FC7\u54C8\u5E0C\u8868\u6216\u8005\u53CC\u6307\u9488\u89E3\u7B54</p><h2 id="\u4EE3\u7801" tabindex="-1">\u4EE3\u7801 <a class="header-anchor" href="#\u4EE3\u7801" aria-hidden="true">#</a></h2><p><strong>1. \u54C8\u5E0C\u8868</strong></p><div class="language-js"><pre><code><span class="token comment">/**
 * @param {number[]} numbers
 * @param {number} target
 * @return {number[]}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">numbers<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      map<span class="token punctuation">[</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>2. \u53CC\u6307\u9488\u6CD5</strong></p><div class="language-js"><pre><code><span class="token comment">/**
 * @param {number[]} numbers
 * @param {number} target
 * @return {number[]}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">numbers<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> j <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,12),e=[o];function c(u,r,l,k,i,d){return s(),a("div",null,e)}var h=n(p,[["render",c]]);export{_ as __pageData,h as default};
