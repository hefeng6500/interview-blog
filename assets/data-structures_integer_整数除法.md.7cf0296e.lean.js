import{_ as n,c as s,o as a,a as p}from"./app.a1f82200.js";const b='{"title":"\u6574\u6570\u9664\u6CD5","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u6574\u6570\u9664\u6CD5","slug":"\u6574\u6570\u9664\u6CD5"},{"level":2,"title":"\u9898\u76EE","slug":"\u9898\u76EE"},{"level":2,"title":"\u601D\u8DEF","slug":"\u601D\u8DEF"},{"level":2,"title":"\u4EE3\u7801","slug":"\u4EE3\u7801"}],"relativePath":"data-structures/integer/\u6574\u6570\u9664\u6CD5.md","lastUpdated":1642846449646}',t={},o=p(`__VP_STATIC_START__<h2 id="\u6574\u6570\u9664\u6CD5" tabindex="-1">\u6574\u6570\u9664\u6CD5 <a class="header-anchor" href="#\u6574\u6570\u9664\u6CD5" aria-hidden="true">#</a></h2><h2 id="\u9898\u76EE" tabindex="-1">\u9898\u76EE <a class="header-anchor" href="#\u9898\u76EE" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/xoh6Oh/" target="_blank" rel="noopener noreferrer">\u5251\u6307 Offer II 001. \u6574\u6570\u9664\u6CD5</a></p><p>\u7ED9\u5B9A\u4E24\u4E2A\u6574\u6570 a \u548C b \uFF0C\u6C42\u5B83\u4EEC\u7684\u9664\u6CD5\u7684\u5546 a/b \uFF0C\u8981\u6C42\u4E0D\u5F97\u4F7F\u7528\u4E58\u53F7 &#39;*&#39;\u3001\u9664\u53F7 &#39;/&#39; \u4EE5\u53CA\u6C42\u4F59\u7B26\u53F7 &#39;%&#39; \u3002</p><p><strong>\u6CE8\u610F\uFF1A</strong></p><ul><li>\u6574\u6570\u9664\u6CD5\u7684\u7ED3\u679C\u5E94\u5F53\u622A\u53BB\uFF08truncate\uFF09\u5176\u5C0F\u6570\u90E8\u5206\uFF0C\u4F8B\u5982\uFF1Atruncate(8.345) = 8\xA0 \u4EE5\u53CA truncate(-2.7335) = -2</li><li>\u5047\u8BBE\u6211\u4EEC\u7684\u73AF\u5883\u53EA\u80FD\u5B58\u50A8 32 \u4F4D\u6709\u7B26\u53F7\u6574\u6570\uFF0C\u5176\u6570\u503C\u8303\u56F4\u662F [\u22122^31,\xA02^31\u22121]\u3002\u672C\u9898\u4E2D\uFF0C\u5982\u679C\u9664\u6CD5\u7ED3\u679C\u6EA2\u51FA\uFF0C\u5219\u8FD4\u56DE 2^31 \u2212 1</li></ul><h2 id="\u601D\u8DEF" tabindex="-1">\u601D\u8DEF <a class="header-anchor" href="#\u601D\u8DEF" aria-hidden="true">#</a></h2><p>\u9664\u6CD5\u4E0D\u80FD\u7528 *\u3001/\u3001% \uFF1F\u90A3\u8BE5\u600E\u4E48\u529E\u5462\uFF1F\u5C06\u9664\u6570\u53E0\u52A0\u4EE5\u81F3\u7B49\u4E8E\u88AB\u9664\u6570\uFF0C\u6216\u8005\u88AB\u9664\u6570<strong>\u53E0\u51CF</strong>\u4EE5\u81F3\u4E8E\u9664\u6570</p><p>\u5982\u679C\u5B58\u5728\u4E24\u4E2A\u6570\u6B63\u8D1F\u53F7\u4E0D\u76F8\u540C\u5462\uFF1F<strong>\u8003\u8651\u7B26\u53F7\u95EE\u9898</strong></p><p><strong>\u8003\u8651\u8FB9\u754C\u6EA2\u51FA\u95EE\u9898</strong>\uFF0C\u6BD4\u5982\uFF1A<code>-2^31 / -1 = 2^31</code> \u8FD9\u4E2A\u65F6\u5019\u5C31\u8981\u505A\u8FB9\u754C\u5904\u7406</p><h2 id="\u4EE3\u7801" tabindex="-1">\u4EE3\u7801 <a class="header-anchor" href="#\u4EE3\u7801" aria-hidden="true">#</a></h2><p><strong>1. \u53E0\u51CF\u6CD5</strong></p><div class="language-js"><pre><code><span class="token comment">/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">divide</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8003\u8651\u6570\u503C\u6EA2\u51FA\u95EE\u9898</span>
  <span class="token keyword">const</span> <span class="token constant">MAX</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token constant">MIN</span> <span class="token operator">=</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token constant">MIN</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">MAX</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token constant">MIN</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">MIN</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u5F02\u6216\u8FD0\u7B97\u76F4\u63A5\u5224\u65AD\u7B26\u53F7\u662F\u5426\u76F8\u540C</span>
  <span class="token keyword">const</span> isNegative <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// \u4E0D\u65AD\u53E0\u51CF\u4EE5\u81F3\u4E8E\u9664\u6570\u5C0F\u4E8E\u88AB\u9664\u6570</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">-=</span> b<span class="token punctuation">;</span>
    time<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> isNegative <span class="token operator">?</span> <span class="token operator">-</span>time <span class="token operator">:</span> time<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>2. \u4F4D\u8FD0\u7B97</strong></p><div class="language-js"><pre><code><span class="token comment">/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">divide</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">MAX</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token constant">MIN</span> <span class="token operator">=</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token constant">MIN</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">MAX</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token constant">MIN</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">MIN</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> negative <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  b <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// \u8FD9\u6BB5\u4F4D\u8FD0\u7B97\u65E0\u6CD5\u7406\u89E3</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&gt;&gt;&gt;</span> x<span class="token punctuation">)</span> <span class="token operator">-</span> b <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      a <span class="token operator">=</span> a <span class="token operator">-</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      time <span class="token operator">=</span> time <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> negative <span class="token operator">?</span> <span class="token operator">-</span>time <span class="token operator">:</span> time<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>__VP_STATIC_END__`,15),e=[o];function c(l,u,k,r,i,d){return a(),s("div",null,e)}var h=n(t,[["render",c]]);export{b as __pageData,h as default};
