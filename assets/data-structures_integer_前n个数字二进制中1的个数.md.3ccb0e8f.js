import{_ as n,c as a,o as s,a as t}from"./app.e81d32ba.js";const h='{"title":"\u524Dn\u4E2A\u6570\u5B57\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u9898\u76EE","slug":"\u9898\u76EE"},{"level":2,"title":"\u601D\u8DEF","slug":"\u601D\u8DEF"},{"level":2,"title":"\u4EE3\u7801","slug":"\u4EE3\u7801"}],"relativePath":"data-structures/integer/\u524Dn\u4E2A\u6570\u5B57\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570.md","lastUpdated":1641652942386}',p={},e=t(`<h1 id="\u524Dn\u4E2A\u6570\u5B57\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570" tabindex="-1">\u524Dn\u4E2A\u6570\u5B57\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570 <a class="header-anchor" href="#\u524Dn\u4E2A\u6570\u5B57\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570" aria-hidden="true">#</a></h1><h2 id="\u9898\u76EE" tabindex="-1">\u9898\u76EE <a class="header-anchor" href="#\u9898\u76EE" aria-hidden="true">#</a></h2><p><a href="https://leetcode-cn.com/problems/w3tCBm/" target="_blank" rel="noopener noreferrer">\u5251\u6307 Offer II 003.\u524Dn\u4E2A\u6570\u5B57\u4E8C\u8FDB\u5236\u4E2D1\u7684\u4E2A\u6570</a></p><h2 id="\u601D\u8DEF" tabindex="-1">\u601D\u8DEF <a class="header-anchor" href="#\u601D\u8DEF" aria-hidden="true">#</a></h2><p>Brian\xA0Kernighan \u7B97\u6CD5\u7684\u539F\u7406\u662F\uFF1A\u5BF9\u4E8E\u4EFB\u610F\u6574\u6570 xx\uFF0C\u4EE4 <code>x = x &amp; (x-1)</code>\uFF0C\u8BE5\u8FD0\u7B97\u5C06 x \u7684\u4E8C\u8FDB\u5236\u8868\u793A\u7684\u6700\u540E\u4E00\u4E2A 1 \u53D8\u6210 0\u3002\u56E0\u6B64\uFF0C\u5BF9 x \u91CD\u590D\u8BE5\u64CD\u4F5C\uFF0C\u76F4\u5230 x \u53D8\u6210 0\uFF0C\u5219\u64CD\u4F5C\u6B21\u6570\u5373\u4E3A x \u7684\u300C\u4E00\u6BD4\u7279\u6570\u300D</p><h2 id="\u4EE3\u7801" tabindex="-1">\u4EE3\u7801 <a class="header-anchor" href="#\u4EE3\u7801" aria-hidden="true">#</a></h2><p><strong>1.\u65B9\u6CD5\u4E00\uFF1ABrian Kernighan \u7B97\u6CD5</strong></p><div class="language-js"><pre><code><span class="token comment">/**
 * @param {number} n
 * @return {number[]}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">countBits</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">countOnes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      a <span class="token operator">&amp;=</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">countOnes</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,8),o=[e];function c(r,l,u,i,k,d){return s(),a("div",null,o)}var m=n(p,[["render",c]]);export{h as __pageData,m as default};
